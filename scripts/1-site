#!/bin/bash

set -e

# shellcheck disable=SC1091
[ -f .env ] && . .env

CONTACT=${CONTACT:-$(whoami)}
REGION=${REGION:-us-east-2}
STAGE=${STAGE:-staging}

VERSION=$(git rev-parse HEAD | cut -c-7)

if [ "$STAGE" = "prod" ]; then
  NODE_ENV=production
else
  NODE_ENV=$STAGE
fi

# ------------------------------------------------------------------------------

function install-prod-deps-only() {
  git submodule deinit --all -f
  npx lerna clean --yes
  npx lerna bootstrap -- --production --no-optional
}

function replace-symlinked-deps() {
  cp -RL node_modules node_modules_fixed
  rm -rf node_modules
  mv node_modules_fixed node_modules
}

function eb-init() {
  eb init "$1" \
    --platform "docker" \
    --region "$REGION"
}

function eb-list() {
  eb list \
    --region "$REGION" | { grep "$1" || true; }
}

function eb-create() {
  eb create "$1" \
    --elb-type application \
    --envvars "$2" \
    --instance_type "$3" \
    --region "$REGION" \
    --tags Contact="$CONTACT",Service=Pure
}

function eb-status() {
  eb status "$1" \
    --region "$REGION" | { grep "Status: Ready" || true; }
}

function eb-deploy() {
  # shellcheck disable=SC2046
  eb setenv $(echo "$2" | tr "," " ") \
    --environment "$1" \
    --region "$REGION" \
    --timeout 20 &
  PID=$!

  RC=0
  while [ $RC -eq 0 ]; do
    echo "Waiting for eb setenv to return..."
    sleep 60
    kill -0 $PID 2>/dev/null && RC=$? || RC=$?
  done
  wait $PID && RC=$? || RC=$?
  if [ ! $RC -eq 0 ]; then
    exit $RC
  fi

  while [ -z "$(eb-status "$1")" ]; do
    echo "Waiting for $1 to be ready after setenv..."
    sleep 60
  done

  eb deploy "$1" \
    --region "$REGION" \
    --timeout 20 &
  PID=$!

  RC=0
  while [ $RC -eq 0 ]; do
    echo "Waiting for eb deploy to return..."
    sleep 60
    kill -0 $PID 2>/dev/null && RC=$? || RC=$?
  done
  wait $PID && RC=$? || RC=$?
  if [ ! $RC -eq 0 ]; then
    exit $RC
  fi

  while [ -z "$(eb-status "$1")" ]; do
    echo "Waiting for $1 to be ready after deploy..."
    sleep 60
  done
}

# ------------------------------------------------------------------------------

CHANGED=$(npx lerna list --all --since HEAD~1)

if [ -z "$CHANGED" ]; then
  echo "No packages have changes, skipping deploy"
  exit 0
fi

echo "Cleaning up and installing production dependencies only"
install-prod-deps-only

# ------------------------------------------------------------------------------

if [ -n "$(echo "$CHANGED" | { grep pure-finance-site || true; })" ]; then
  echo "WEB SERVER"
  cd site

  echo "Replacing local dependencies"
  replace-symlinked-deps

  echo "Initalizing site"
  SITE_EB_APP_NAME=pure-site
  eb-init "$SITE_EB_APP_NAME"

  echo "Deploying web server"
  SITE_EB_ENV_NAME=$SITE_EB_APP_NAME-$STAGE
  SITE_EB_ENV_VARS="NODE_ENV=$NODE_ENV,NODE_URL=$NODE_URL,VERSION=$VERSION"

  ENVIRONMENT=$(eb-list "$SITE_EB_ENV_NAME")
  if [ -z "$ENVIRONMENT" ]; then
    echo "Creating environment"
    eb-create "$SITE_EB_ENV_NAME" "$SITE_EB_ENV_VARS" m5.large
  else
    echo "Deploying to environment"
    eb-deploy "$SITE_EB_ENV_NAME" "$SITE_EB_ENV_VARS"
  fi

  echo "WEB SERVER DEPLOYED"
  cd ..
fi
